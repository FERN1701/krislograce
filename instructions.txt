




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::: DJANGO DATABASE FOLDER SETTINGS.PY ::::::::::::::::::::::::::::::::::


import os 

ALLOWED_HOSTS = ['*']


INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    'crispy_forms',
    'import_export',
]


LOGIN_REDIRECT_URL = 'home' #MAIN INDEX
ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login' #lOGOUT
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = False
ACCOUNT_SESSION_REMEMBER = True
SITE_ID = 1
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]




TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'Templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


:::::::::::::: AFTER TEMPLATES 

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


:::::::::::::: AFTER AUTH_PASSWORD_VALIDATORS = [ ]



LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Manila'
USE_I18N = True
USE_TZ = True
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'Thesis_Database/static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'static') # Automatically Csreated on Production
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'argonfernando453@gmail.com'
EMAIL_HOST_PASSWORD = 'oxrkklcttqackitg' 
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'System Messages'


JAZZMIN_SETTINGS = {
    "site_title": "site name",
    "site_header": "site name",
    "copyright": "site name",
    "welcome_sign": "Welcome site name",
    "site_logo": "",
    "site_logo_classes": "img-circle",
    "site_brand":"site name",
    #--------------
    "hide_models": ["auth.User","auth.Group"],
    "show_ui_builder": False,
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "admin:index", "permissions": ["auth.view_user"]},

        # model admin to link to (Permissions checked against model)
        {"model": "auth.User"},
        
         # external url that opens in a new window (Permissions can be added)
        {"name": "Live View", "url": "https://falcon2023.pythonanywhere.com/", "new_window": True},

    ],
    "changeform_format": "horizontal_tabs",
    "search_model": ["auth.User","Animations.Animation"],
    "icons": {
        "account.emailaddress": "fas fa-users-cog",
        "Public.contact":"fas fa-book",
        "Public.Social":"fas fa-link",
        "Thesis.aboutus":"fas fa-address-card",
        "Thesis.features":"fas fa-list"
    },
    "order_with_respect_to": ["OpenCv","Animations","Public", "Thesis"],
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-hand-peace",
}
{{ jazzmin_settings.site_title }}


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::: DJANGO Project FOLDER URLS.PY ::::::::::::::::::::::::::::::::::::::



from django.contrib import admin
from django.urls import path, include, re_path

from django.conf import settings
from django.conf.urls.static import static
from Portfolio import views
from django.conf import settings
from django.conf.urls.static import static
from django.views.static import serve
from django.urls import path, reverse_lazy
from django.contrib.auth import views as auth_views

urlpatterns = [
    re_path(r'^media/(?P<path>.*)$', serve, {'document_root': settings.MEDIA_ROOT}),
    re_path(r'^static/(?P<path>.*)$', serve, {'document_root': settings.STATIC_ROOT}),
    path('admin/', admin.site.urls),

    #path('',include('Portfolio.urls')),

    #path('Gallery/',include('Gallery.urls')),

    path('',views.home, name='home'),
    path('reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),
    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(success_url=reverse_lazy('home')), name='password_reset_confirm'),
    path('accounts/',include('allauth.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::: DJANGO MAIN APPS FOLDER URLS.PY ::::::::::::::::::::::::::::::::::::::

from django.urls import path
from . import views

from django.conf import settings

from django.conf.urls.static import static
from django.contrib.auth import views as auth_views
from django.urls import path, include
#for Routing

urlpatterns = [
    path('',views.home,name = 'home'),
    #path('about/', views.about_view, name='about'),
    #path('features/', views.feature_view, name='features'),
    #path('developers/', views.Developers, name='developers'),
    #path('contact/', views.ContactUS, name='contact'),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::: DJANGO MAIN APPS FOLDER VIEWS.PY ::::::::::::::::::::::::::::::::::::::


from django.shortcuts import render, redirect
from Thesis.forms import *
from Thesis.models import *
from Public.models import *
from Public.forms import *
from django.contrib import messages
from django.conf import settings


def home(request):
    social = Social.objects.all()
    context = {
        'social':social,
        'jazzmin_settings': settings.JAZZMIN_SETTINGS,

    }
    return render(request,'index.html',context)


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::: DJANGO MAIN APPS FOLDER ADMIN.PY BASIC FUNSTIONS  :::::::::::::::::::::

class ArrayAdmin(admin.ModelAdmin):
    #def has_add_permission(self, request):
        #return False
    #def has_delete_permission(self, request, obj=None):
        #return False

    #list_display = ('ProjectName', 'published', 'Highlight')
    #actions = ['mark_highlight', 'unmark_highlight','unmark_Portfolio']

    #def mark_highlight(self, request, queryset):
        #queryset.update(Highlight='yes')
        #self.message_user(request, f"Checked Projects are in Highlights")
    #mark_highlight.short_description = "Set Highlight"

    #def unmark_highlight(self, request, queryset):
        #queryset.update(Highlight='no')
        #self.message_user(request, f"Checked Projects are Hide in Highlights")
    #unmark_highlight.short_description = "Set Unhighlight"
    #def unmark_Portfolio(self, request, queryset):
        #queryset.update(Highlight='hide')
        #self.message_user(request, f"Checked Projects Hide in Portfolio")
    #unmark_Portfolio.short_description = "Hide to Portfolio"
    
admin.site.register(Projects, ArrayAdmin)